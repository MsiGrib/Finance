// <auto-generated />
using System;
using InternalApi.EntityGateWay;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InternalApi.Migrations
{
    [DbContext(typeof(FinanceDBContext))]
    [Migration("20250407202424_InitialCreate222")]
    partial class InitialCreate222
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataModel.DataBase.MainBoardDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("OrderLevel")
                        .HasColumnType("integer");

                    b.Property<long>("TableId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.ToTable("MainBoards");
                });

            modelBuilder.Entity("DataModel.DataBase.PlotDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Plots");
                });

            modelBuilder.Entity("DataModel.DataBase.TableDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlotId")
                        .IsUnique();

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("DataModel.DataBase.UserDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataModel.DataBase.MainBoardDTO", b =>
                {
                    b.HasOne("DataModel.DataBase.TableDTO", "Table")
                        .WithOne("MainBoard")
                        .HasForeignKey("DataModel.DataBase.MainBoardDTO", "TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("DataModel.DataBase.TableDTO", b =>
                {
                    b.HasOne("DataModel.DataBase.PlotDTO", "Plot")
                        .WithOne("Table")
                        .HasForeignKey("DataModel.DataBase.TableDTO", "PlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plot");
                });

            modelBuilder.Entity("DataModel.DataBase.PlotDTO", b =>
                {
                    b.Navigation("Table")
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.DataBase.TableDTO", b =>
                {
                    b.Navigation("MainBoard")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
